/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.accumulo.core.master.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class UserCompaction implements org.apache.thrift.TBase<UserCompaction, UserCompaction._Fields>, java.io.Serializable, Cloneable, Comparable<UserCompaction> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserCompaction");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TABLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tableId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TABLETS_COMPACTED_FIELD_DESC = new org.apache.thrift.protocol.TField("tabletsCompacted", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TABLETS_TO_COMPACT_FIELD_DESC = new org.apache.thrift.protocol.TField("tabletsToCompact", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField COMPACTION_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("compactionConfig", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UserCompactionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UserCompactionTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String id; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String tableId; // required
  public int tabletsCompacted; // required
  public int tabletsToCompact; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer compactionConfig; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TABLE_ID((short)2, "tableId"),
    TABLETS_COMPACTED((short)3, "tabletsCompacted"),
    TABLETS_TO_COMPACT((short)4, "tabletsToCompact"),
    COMPACTION_CONFIG((short)5, "compactionConfig");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TABLE_ID
          return TABLE_ID;
        case 3: // TABLETS_COMPACTED
          return TABLETS_COMPACTED;
        case 4: // TABLETS_TO_COMPACT
          return TABLETS_TO_COMPACT;
        case 5: // COMPACTION_CONFIG
          return COMPACTION_CONFIG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TABLETSCOMPACTED_ISSET_ID = 0;
  private static final int __TABLETSTOCOMPACT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_ID, new org.apache.thrift.meta_data.FieldMetaData("tableId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLETS_COMPACTED, new org.apache.thrift.meta_data.FieldMetaData("tabletsCompacted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TABLETS_TO_COMPACT, new org.apache.thrift.meta_data.FieldMetaData("tabletsToCompact", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPACTION_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("compactionConfig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserCompaction.class, metaDataMap);
  }

  public UserCompaction() {
  }

  public UserCompaction(
    java.lang.String id,
    java.lang.String tableId,
    int tabletsCompacted,
    int tabletsToCompact,
    java.nio.ByteBuffer compactionConfig)
  {
    this();
    this.id = id;
    this.tableId = tableId;
    this.tabletsCompacted = tabletsCompacted;
    setTabletsCompactedIsSet(true);
    this.tabletsToCompact = tabletsToCompact;
    setTabletsToCompactIsSet(true);
    this.compactionConfig = org.apache.thrift.TBaseHelper.copyBinary(compactionConfig);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserCompaction(UserCompaction other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetTableId()) {
      this.tableId = other.tableId;
    }
    this.tabletsCompacted = other.tabletsCompacted;
    this.tabletsToCompact = other.tabletsToCompact;
    if (other.isSetCompactionConfig()) {
      this.compactionConfig = org.apache.thrift.TBaseHelper.copyBinary(other.compactionConfig);
    }
  }

  public UserCompaction deepCopy() {
    return new UserCompaction(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.tableId = null;
    setTabletsCompactedIsSet(false);
    this.tabletsCompacted = 0;
    setTabletsToCompactIsSet(false);
    this.tabletsToCompact = 0;
    this.compactionConfig = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getId() {
    return this.id;
  }

  public UserCompaction setId(@org.apache.thrift.annotation.Nullable java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTableId() {
    return this.tableId;
  }

  public UserCompaction setTableId(@org.apache.thrift.annotation.Nullable java.lang.String tableId) {
    this.tableId = tableId;
    return this;
  }

  public void unsetTableId() {
    this.tableId = null;
  }

  /** Returns true if field tableId is set (has been assigned a value) and false otherwise */
  public boolean isSetTableId() {
    return this.tableId != null;
  }

  public void setTableIdIsSet(boolean value) {
    if (!value) {
      this.tableId = null;
    }
  }

  public int getTabletsCompacted() {
    return this.tabletsCompacted;
  }

  public UserCompaction setTabletsCompacted(int tabletsCompacted) {
    this.tabletsCompacted = tabletsCompacted;
    setTabletsCompactedIsSet(true);
    return this;
  }

  public void unsetTabletsCompacted() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLETSCOMPACTED_ISSET_ID);
  }

  /** Returns true if field tabletsCompacted is set (has been assigned a value) and false otherwise */
  public boolean isSetTabletsCompacted() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLETSCOMPACTED_ISSET_ID);
  }

  public void setTabletsCompactedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLETSCOMPACTED_ISSET_ID, value);
  }

  public int getTabletsToCompact() {
    return this.tabletsToCompact;
  }

  public UserCompaction setTabletsToCompact(int tabletsToCompact) {
    this.tabletsToCompact = tabletsToCompact;
    setTabletsToCompactIsSet(true);
    return this;
  }

  public void unsetTabletsToCompact() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLETSTOCOMPACT_ISSET_ID);
  }

  /** Returns true if field tabletsToCompact is set (has been assigned a value) and false otherwise */
  public boolean isSetTabletsToCompact() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLETSTOCOMPACT_ISSET_ID);
  }

  public void setTabletsToCompactIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLETSTOCOMPACT_ISSET_ID, value);
  }

  public byte[] getCompactionConfig() {
    setCompactionConfig(org.apache.thrift.TBaseHelper.rightSize(compactionConfig));
    return compactionConfig == null ? null : compactionConfig.array();
  }

  public java.nio.ByteBuffer bufferForCompactionConfig() {
    return org.apache.thrift.TBaseHelper.copyBinary(compactionConfig);
  }

  public UserCompaction setCompactionConfig(byte[] compactionConfig) {
    this.compactionConfig = compactionConfig == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(compactionConfig.clone());
    return this;
  }

  public UserCompaction setCompactionConfig(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer compactionConfig) {
    this.compactionConfig = org.apache.thrift.TBaseHelper.copyBinary(compactionConfig);
    return this;
  }

  public void unsetCompactionConfig() {
    this.compactionConfig = null;
  }

  /** Returns true if field compactionConfig is set (has been assigned a value) and false otherwise */
  public boolean isSetCompactionConfig() {
    return this.compactionConfig != null;
  }

  public void setCompactionConfigIsSet(boolean value) {
    if (!value) {
      this.compactionConfig = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case TABLE_ID:
      if (value == null) {
        unsetTableId();
      } else {
        setTableId((java.lang.String)value);
      }
      break;

    case TABLETS_COMPACTED:
      if (value == null) {
        unsetTabletsCompacted();
      } else {
        setTabletsCompacted((java.lang.Integer)value);
      }
      break;

    case TABLETS_TO_COMPACT:
      if (value == null) {
        unsetTabletsToCompact();
      } else {
        setTabletsToCompact((java.lang.Integer)value);
      }
      break;

    case COMPACTION_CONFIG:
      if (value == null) {
        unsetCompactionConfig();
      } else {
        if (value instanceof byte[]) {
          setCompactionConfig((byte[])value);
        } else {
          setCompactionConfig((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TABLE_ID:
      return getTableId();

    case TABLETS_COMPACTED:
      return getTabletsCompacted();

    case TABLETS_TO_COMPACT:
      return getTabletsToCompact();

    case COMPACTION_CONFIG:
      return getCompactionConfig();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TABLE_ID:
      return isSetTableId();
    case TABLETS_COMPACTED:
      return isSetTabletsCompacted();
    case TABLETS_TO_COMPACT:
      return isSetTabletsToCompact();
    case COMPACTION_CONFIG:
      return isSetCompactionConfig();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof UserCompaction)
      return this.equals((UserCompaction)that);
    return false;
  }

  public boolean equals(UserCompaction that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_tableId = true && this.isSetTableId();
    boolean that_present_tableId = true && that.isSetTableId();
    if (this_present_tableId || that_present_tableId) {
      if (!(this_present_tableId && that_present_tableId))
        return false;
      if (!this.tableId.equals(that.tableId))
        return false;
    }

    boolean this_present_tabletsCompacted = true;
    boolean that_present_tabletsCompacted = true;
    if (this_present_tabletsCompacted || that_present_tabletsCompacted) {
      if (!(this_present_tabletsCompacted && that_present_tabletsCompacted))
        return false;
      if (this.tabletsCompacted != that.tabletsCompacted)
        return false;
    }

    boolean this_present_tabletsToCompact = true;
    boolean that_present_tabletsToCompact = true;
    if (this_present_tabletsToCompact || that_present_tabletsToCompact) {
      if (!(this_present_tabletsToCompact && that_present_tabletsToCompact))
        return false;
      if (this.tabletsToCompact != that.tabletsToCompact)
        return false;
    }

    boolean this_present_compactionConfig = true && this.isSetCompactionConfig();
    boolean that_present_compactionConfig = true && that.isSetCompactionConfig();
    if (this_present_compactionConfig || that_present_compactionConfig) {
      if (!(this_present_compactionConfig && that_present_compactionConfig))
        return false;
      if (!this.compactionConfig.equals(that.compactionConfig))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetTableId()) ? 131071 : 524287);
    if (isSetTableId())
      hashCode = hashCode * 8191 + tableId.hashCode();

    hashCode = hashCode * 8191 + tabletsCompacted;

    hashCode = hashCode * 8191 + tabletsToCompact;

    hashCode = hashCode * 8191 + ((isSetCompactionConfig()) ? 131071 : 524287);
    if (isSetCompactionConfig())
      hashCode = hashCode * 8191 + compactionConfig.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(UserCompaction other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTableId()).compareTo(other.isSetTableId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableId, other.tableId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTabletsCompacted()).compareTo(other.isSetTabletsCompacted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTabletsCompacted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tabletsCompacted, other.tabletsCompacted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTabletsToCompact()).compareTo(other.isSetTabletsToCompact());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTabletsToCompact()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tabletsToCompact, other.tabletsToCompact);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCompactionConfig()).compareTo(other.isSetCompactionConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompactionConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compactionConfig, other.compactionConfig);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("UserCompaction(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tableId:");
    if (this.tableId == null) {
      sb.append("null");
    } else {
      sb.append(this.tableId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tabletsCompacted:");
    sb.append(this.tabletsCompacted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tabletsToCompact:");
    sb.append(this.tabletsToCompact);
    first = false;
    if (!first) sb.append(", ");
    sb.append("compactionConfig:");
    if (this.compactionConfig == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.compactionConfig, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserCompactionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserCompactionStandardScheme getScheme() {
      return new UserCompactionStandardScheme();
    }
  }

  private static class UserCompactionStandardScheme extends org.apache.thrift.scheme.StandardScheme<UserCompaction> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserCompaction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TABLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tableId = iprot.readString();
              struct.setTableIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TABLETS_COMPACTED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tabletsCompacted = iprot.readI32();
              struct.setTabletsCompactedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TABLETS_TO_COMPACT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tabletsToCompact = iprot.readI32();
              struct.setTabletsToCompactIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMPACTION_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.compactionConfig = iprot.readBinary();
              struct.setCompactionConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserCompaction struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.tableId != null) {
        oprot.writeFieldBegin(TABLE_ID_FIELD_DESC);
        oprot.writeString(struct.tableId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TABLETS_COMPACTED_FIELD_DESC);
      oprot.writeI32(struct.tabletsCompacted);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TABLETS_TO_COMPACT_FIELD_DESC);
      oprot.writeI32(struct.tabletsToCompact);
      oprot.writeFieldEnd();
      if (struct.compactionConfig != null) {
        oprot.writeFieldBegin(COMPACTION_CONFIG_FIELD_DESC);
        oprot.writeBinary(struct.compactionConfig);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserCompactionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserCompactionTupleScheme getScheme() {
      return new UserCompactionTupleScheme();
    }
  }

  private static class UserCompactionTupleScheme extends org.apache.thrift.scheme.TupleScheme<UserCompaction> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserCompaction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetTableId()) {
        optionals.set(1);
      }
      if (struct.isSetTabletsCompacted()) {
        optionals.set(2);
      }
      if (struct.isSetTabletsToCompact()) {
        optionals.set(3);
      }
      if (struct.isSetCompactionConfig()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetTableId()) {
        oprot.writeString(struct.tableId);
      }
      if (struct.isSetTabletsCompacted()) {
        oprot.writeI32(struct.tabletsCompacted);
      }
      if (struct.isSetTabletsToCompact()) {
        oprot.writeI32(struct.tabletsToCompact);
      }
      if (struct.isSetCompactionConfig()) {
        oprot.writeBinary(struct.compactionConfig);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserCompaction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tableId = iprot.readString();
        struct.setTableIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.tabletsCompacted = iprot.readI32();
        struct.setTabletsCompactedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.tabletsToCompact = iprot.readI32();
        struct.setTabletsToCompactIsSet(true);
      }
      if (incoming.get(4)) {
        struct.compactionConfig = iprot.readBinary();
        struct.setCompactionConfigIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
  private static void unusedMethod() {}
}

